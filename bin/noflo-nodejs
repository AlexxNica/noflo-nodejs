#!/usr/bin/env node
// vim: set filetype=javascript:
var program = require('commander');
var http = require('http');
var lib = require('../index');
var noflo = require('noflo');
var runtime = require('noflo-runtime-websocket');
var flowhub = require('flowhub-registry');
var querystring = require('querystring');
var path = require('path');

program
  .version(lib.getLibraryConfig().version)
    .option('--graph <graph>', 'Path to a graph file to start', null)
    .option('--capture-output [true/false]', 'Catch writes to stdout and send to the FBP protocol client (default = false)', false)
    .option('--catch-exceptions [true/false]', 'Catch exceptions and report to the FBP protocol client  (default = true)', true)
    .parse(process.argv);

var stored = lib.getStored();
var baseDir = process.env.PROJECT_HOME || process.cwd();
var interval = 10 * 60 * 1000;

if (!stored.id) {
  console.error('No configuration found at ' + lib.getStoredPath() +
                '. Please run noflo-nodejs-init first if you want the runtime to showup on flowhub.');
  if (!program.graph) {
    // Since we don't register with flowhub, we need to run a graph
    console.error('No default graph given either. Exiting.');
    process.exit(1);
  }
} else {
  try {
    var flowhubRuntime = new flowhub.Runtime({
      label: stored.label,
      id: stored.id,
      user: stored.user,
      secret: stored.secret,
      protocol: 'websocket',
      address: 'ws://' + stored.host + ':' + stored.port,
      type: 'noflo-nodejs'
    });
  } catch (e) {
    console.log("Failed to initialize runtime with configuration:", e.message);
    process.exit(1);
  }
}

var startServer = function(program, defaultGraph) {
  var server = http.createServer(function () {});
  var rt = runtime(server, {
    defaultGraph: defaultGraph,
    baseDir: baseDir,
    captureOutput: program.captureOutput,
    catchExceptions: program.catchExceptions
  });

  server.listen(stored.port, function () {
    var address = 'ws://' + stored.host + ':' + stored.port;
    var params = querystring.escape('protocol=websocket&address=' + address);
    console.log('NoFlo runtime listening at ' + address);
    console.log('Using ' + baseDir + ' for component loading');
    console.log('Live IDE URL: ' + stored.ide + '#runtime/endpoint?' + params);

    if (flowhubRuntime) {
      // Register the runtime with Flowhub so that it will show up in the UI
      flowhubRuntime.register(function (err, ok) {
        if (err) {
          console.log('Registration with Flowhub failed: ' + err.message);
          return;
        }

        console.log('Registered with Flowhub. The Runtime should now be accessible in the UI');

        // Ping Flowhub periodically to let the user know that the
        // runtime is still available
        setInterval(function () {
          flowhubRuntime.ping();
        }, interval);
      });
    }
  });
};

if (program.graph) {
  program.graph = path.resolve(process.cwd(), program.graph);
  console.log('Loading main graph: ' + program.graph);
  noflo.graph.loadFile(program.graph, function(graph) {
    startServer(program, graph);
  });
} else {
  startServer(program, null);
}
